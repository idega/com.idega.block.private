<?xml version="1.0" encoding="UTF-8"?>

<process-definition
	xmlns=""
	name="DefaultSocialServices">
	<start-state name="startSubprocess">
		<transition to="subscribeHandlers"></transition>
	</start-state>
	
	<!-- Entering e-mails fetcher subprocess -->
	<process-state name="emailsFetcher">
		<sub-process
			name="fetchEmails"
			binding="late" />
		<variable
			name="string_emailReadAssignmentExpression"
			access="read"
			mapped-name="string_emailReadAssignmentExpression" />
		<variable
			name='mainProcessInstanceId'
			access='read' />
		<event type="node-enter">
			<script>
				<expression>
					emailReadAssignmentExpression = "{taskAssignment: {roles: {role: [{roleName: 'bpm_social_service_handler', accesses: {access: [read]}}]}}}";
				</expression>
				<variable
					name='string_emailReadAssignmentExpression'
					access='write'
					mapped-name='emailReadAssignmentExpression' />
				<variable
					name='handlerRoleName'
					access='read' />
			</script>
		</event>
		<transition to="emailsFetcherEnd"></transition>
	</process-state>
	
	<!-- Start owner assignment sub-process -->
	<process-state name="handlerAssignsOwner">
		<sub-process
			name="AssignmentAssist"
			binding="late" />
		<variable
			name="assignmentAssistantRoleExp"
			access="read"
			mapped-name="assistantRoleExpression"/>
		<variable
			name="assignmentAssigneeRoleExp"
			access="read"
			mapped-name="assigneeRoleExpression"/>
		<variable
			name='mainProcessInstanceId'
			access='read'/>
		<variable
			name="ownerUserPersonalData"
			access="read"
			mapped-name="assigneeData"/>
		<event type="node-enter">
			<script>
				<expression>
					s_upd = new com.idega.jbpm.identity.UserPersonalData();
					s_upd.setUserEmail(userEmailAddress);
					s_upd.setFullName(userFullName);
					s_upd.setPersonalId(userPersonalId);
					s_upd.setUserType("BPM_USER_NATURAL");
					s_upd.setUserAddress(userAddress);
					s_upd.setUserPostalCode(userPostalCode);
					s_upd.setUserPhone(userPhone);
					s_upd.setHideInContacts(true);
					
					s_roleExp = "{role: {roleName: 'bpm_social_service_handler'}}";
					s_assigneeRoleExp = "{role: {roleName: 'bpm_social_service_owner'}}";
				</expression>
				<variable
					name='ownerUserPersonalData'
					access='write'
					mapped-name='s_upd' />
				<variable
					name='assignmentAssistantRoleExp'
					access='write'
					mapped-name='s_roleExp' />
				<variable
					name='assignmentAssigneeRoleExp'
					access='write'
					mapped-name='s_assigneeRoleExp' />
				<variable
					name='string_userPersonalId'
					access='read'
					mapped-name='userPersonalId' />
				<variable
					name='string_userAddress'
					access='read'
					mapped-name='userAddress' />
				<variable
					name='string_userPostalCode'
					access='read'
					mapped-name='userPostalCode' />
				<variable
					name='string_userPhone'
					access='read'
					mapped-name='userPhone' />
				<variable
					name='string_userName'
					access='read'
					mapped-name='userFullName' />
				<variable
					name='string_userEmail'
					access='read'
					mapped-name='userEmailAddress' />
			</script>
		</event>
		<transition to="ifHandlerAssigned"/>
	</process-state>
	
	<!-- Start of anonymous handler assignment sub-process -->
	<process-state name="anonymousOwnerAssignment">
		<sub-process
			name="AnonAssignment"
			binding="late" />
		<variable
			name="assignmentAssigneeRoleExp"
			access="read"
			mapped-name="assigneeRoleExpression" />
		<variable
			name='mainProcessInstanceId'
			access='read' />
		<variable
			name="ownerUserPersonalData"
			access="read"
			mapped-name="assigneeData" />
	
		<event type="node-enter">
			<script>
				<!-- TODO: this exp should be global -->
				<expression>
					s_processInstanceId = token.getProcessInstance().getId();

					s_upd = new com.idega.jbpm.identity.UserPersonalData();
					s_upd.setUserEmail(userEmailAddress);
					s_upd.setFullName(userFullName);
					s_upd.setPersonalId(userPersonalId);
					s_upd.setUserType("BPM_USER_NATURAL");
					s_upd.setUserAddress(userAddress);
					s_upd.setUserPostalCode(userPostalCode);
					s_upd.setUserPhone(userPhone);

					s_assigneeRoleExp = "{role: {roleName: 'bpm_social_service_owner'}}";
				</expression>
				<!-- <variable
					name='mainProcessInstanceId'
					access='write'
					mapped-name='s_processInstanceId' /> -->
				<variable
					name='ownerUserPersonalData'
					access='write'
					mapped-name='s_upd' />
				<variable
					name='assignmentAssigneeRoleExp'
					access='write'
					mapped-name='s_assigneeRoleExp' />
				<variable
					name='string_userPersonalId'
					access='read'
					mapped-name='userPersonalId' />
				<variable
					name='string_userAddress'
					access='read'
					mapped-name='userAddress' />
				<variable
					name='string_userPostalCode'
					access='read'
					mapped-name='userPostalCode' />
				<variable
					name='string_userPhone'
					access='read'
					mapped-name='userPhone' />
				<variable
					name='string_userName'
					access='read'
					mapped-name='userFullName' />
				<variable
					name='string_userEmail'
					access='read'
					mapped-name='userEmailAddress' />
			</script>
		</event>
		<transition to="sendOwnerCaseCreatedMessage"></transition>
	</process-state>
	
	<!-- Start add attachment sub-process -->
	<process-state name="addAttachment">
        <sub-process 
        	name="addAttachments" 
        	binding="late" />
        <variable 
        	name="string_addAttachmentAssignmentExpression" 
        	access="read" />
        <variable 
        	name='mainProcessInstanceId' 
        	access='read' />
        <event type="node-enter">
        <script>
            <expression>
                addAttachmentAssignmentExpression = "{taskAssignment: {roles: {role: [{roleName: 'bpm_social_service_handler', accesses: {access: [read,write]}}]}}}";
            </expression>
            <variable 
            	name='string_addAttachmentAssignmentExpression' 
            	access='write' 
            	mapped-name='addAttachmentAssignmentExpression' />
        </script>
        </event>
		<transition to="attachementAdded"/>
	</process-state>
	
	<!-- Decision task -->
	<task-node name="decision">
		<task name="Submit Process Ruling">
			<assignment class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>jsonAssignmentHandler</handlerName>
				<propertyMap
					key-type='java.lang.String'
					value-type='java.lang.String'>
					<entry>
						<key>expression</key>
						<value>
							{taskAssignment: {roles: {role: [{roleName: 'bpm_social_service_handler', accesses: {access: [read, write]}}, {roleName: 'bpm_social_service_owner', accesses: {access: [read]}}]}}}
						</value>
					</entry>
				</propertyMap>
			</assignment>
			<controller>
				<variable 
					name="string_userName"
					access="read"/>
				<variable 
					name="string_caseDescription" 
					access="read"/>
				<variable 
					name="string_decision" 
					access="read,write"/>
				<variable 
					name="string_rulingText" 
					access="read,write"/>
				<variable 
					name="string_actionTaken" 
					access="read,write"/>
				<variable
					name="files_processRullingAttachments"
					access="read,write"/>
			</controller>
		</task>
		<transition to="isGranted"></transition>
	</task-node>
	
	<task-node name="closeCase">
		<task name="Complete process">
			<assignment class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>jsonAssignmentHandler</handlerName>
				<propertyMap key-type='java.lang.String' value-type='java.lang.String'>
					<entry>
						<key>expression</key>
						<value>
							{taskAssignment: {roles: {role: [{roleName: 'bpm_social_service_handler', accesses: {access: [read, write]}}, {roleName: 'bpm_social_service_owner', accesses: {access: [read]}}, {roleName: 'bpm_social_service_invited', accesses: {access: [read]}}]}}}
						</value>
					</entry>
				</propertyMap>
			</assignment>
			<controller>
				<variable
					access="write"
					name="string_processEndFinalSummary"/>
				<variable
					access="write"
					name="files_processEndAttachments"/>
			</controller>
		</task>
		<transition to="endCase"></transition>
	</task-node>
	
	<node name="sendMessages">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>sendCaseMessagesHandler</handlerName>
				<propertyMap key-type='java.lang.String' value-type='java.lang.String'>
					<entry>
						<key>inlineSubject</key>
						<value>
							${
							Map subjectMap = new HashMap();
							subjectMap.put("en", "Process ruling has been submitted");
							subjectMap.put("is_IS", "Umsókn þín ({1}, {0}) hjá Lydheilsusjodur hefur verið afgreidd");
							return subjectMap;
							}

						</value>
					</entry>
					<entry>
						<key>inlineMessage</key>
						<value>
							${
							Map messageMap = new HashMap();
							messageMap.put("en", "Hello, {0}.\n Process ruling has been submitted for the case {1} and it is now viewable in your case list with identifier {2} and description {3}.");
							messageMap.put("is_IS", "Sæl/ll, {0}.\nAfgreiðslu umsóknar þinnar í flokknum : {1} með nafnið : {3} og númerið : {2} er nú lokið og þú getur skoðað niðurstöðu hennar á slóðinni\n{4} eða í umsóknarlistanum þínum ef að þú ert skráður notandi.");
							return messageMap;
							}
						</value>
					</entry>
					<entry>
						<key>subjectValues</key>
						<value>
							{list: {mv: [
								{type: "bean", value: "piw.processIdentifier"},
								{type: "bean", value: "piw.processDescription"}
							]}}
						</value>
					</entry>
					<entry>
						<key>messageValues</key>
						<value>
							{list: {mv: [
								{type: "bean", value: "user.name"}, 
								{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
								{type: "bean", value: "piw.processIdentifier"}, 
								{type: "bean", value: "piw.processDescription"},
								{type: "bean", value: "caseUser.urlToTheCase"}
							]}}
						</value>
					</entry>
					<entry>
						<key>sendToRoles</key>
						<value>bpm_social_service_owner</value>
					</entry>
				</propertyMap>
			</action>
		</event>
		<transition to="closeCase"></transition>
	</node>

	<node name="endCase">
		<event type="node-leave">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>endReykjavikProcessHandler</handlerName>
			</action>
		</event>
		<transition to="completeProcess"></transition>
	</node>

	<node name="deny">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>reykjavikDenyProcessRulingHandler</handlerName>
			</action>
		</event>
		<transition to="sendMessages" />
	</node>

	<node name="grant">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>reykjavikGrantProcessRulingHandler</handlerName>
			</action>
		</event>
		<transition to="sendMessages" />
	</node>

	<node name="sendOwnerCaseCreatedMessage">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>sendCaseMessagesHandler</handlerName>
				<propertyMap key-type='java.lang.String' value-type='java.lang.String'>
					<entry>
						<key>inlineSubject</key>
						<value>
							${
							Map subjectMap = new HashMap();
							subjectMap.put("en", "Case created successfully!");
							subjectMap.put("is_IS", "Umsókn þín með nafnið {1}({0}) hefur verið móttekin af Lýðheilsusjóði");
							return subjectMap;
							}
						</value>
					</entry>
					<entry>
						<key>inlineMessage</key>
						<value>
							${
							Map messageMap = new HashMap();
							messageMap.put("en", "Hello, {0}.\n You have successfully created case {1} with identifier {2} and description {3}. We are hopeful that your case will be handled soon. Good luck!");
							messageMap.put("is_IS", "Sæl/ll, {0}.\nUmsókn þín í flokknum : {1} með nafnið : {3} og númerið : {2} hefur verið móttekin af Lýðheilsusjóði. Svar verður sent til þín í tölvupósti þegar umsóknin hefur verið tekin fyrir. Þú getur einnig fylgst með afgreiðslu umsóknarinnar á þessari slóð {4} .");
							return messageMap;
							}
						</value>
					</entry>
					<entry>
						<key>subjectValues</key>
						<value>
							{list: {mv: [
							{type: "bean", value: "piw.processIdentifier"}, 
							{type: "bean", value: "piw.processDescription"}
							]}}
						</value>
					</entry>
					<entry>
						<key>messageValues</key>
						<value>
							{list: {mv: [
							{type: "bean", value: "user.name"}, 
							{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
							{type: "bean", value: "piw.processIdentifier"}, 
							{type: "bean", value: "piw.processDescription"}, 
							{type: "bean", value: "caseUser.urlToTheCase"}]}}
						</value>
					</entry>
					<entry>
						<key>sendToRoles</key>
						<value>bpm_social_service_owner</value>
					</entry>
				</propertyMap>
			</action>
		</event>
		<transition to="sendHandlerNewCaseArrivedMessage"></transition>
	</node>

	<node name="sendHandlerNewCaseArrivedMessage">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>sendCaseMessagesHandler</handlerName>
				<propertyMap key-type='java.lang.String' value-type='java.lang.String'>
					<entry>
						<key>inlineSubject</key>
						<value>
							${
							Map subjectMap = new HashMap();
							subjectMap.put("en", "New application ({1}) in the category {0} was sent to	Lýðheilsusjóður");
							subjectMap.put("is_IS", "Ný umsókn ({1}) í flokknum {0} hefur verið send á Lýðheilsusjóð");
							return subjectMap;
							}
						</value>
					</entry>
					<entry>
						<key>inlineMessage</key>
						<value>
							${
							Map messageMap = new HashMap();
							messageMap.put("en", "Hello, {0}.\n New {1} case with identifier {2} and description {3} has been created.");
							messageMap.put("is_IS", "Sæl/ll, {0}.\nNý umsókn í flokknum : {1} með númerið : {2} og nafnið : {3} hefur verið send inn.");
							return messageMap;
							}
						</value>
					</entry>
					<entry>
						<key>subjectValues</key>
						<value>
							{list: {mv: [
								{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
								{type: "bean", value: "piw.processIdentifier"}
							]}}
						</value>
					</entry>
					<entry>
						<key>messageValues</key>
						<value>
							{list: {mv: [
								{type: "bean", value: "user.name"}, 
								{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
								{type: "bean", value: "piw.processIdentifier"}, 
								{type: "bean", value: "piw.processDescription"}
							]}}
						</value>
					</entry>
					<entry>
						<key>sendToRoles</key>
						<value>bpm_social_service_handler</value>
					</entry>
				</propertyMap>
			</action>
		</event>
		<transition to="attachmentFork"/>
	</node>

	<!-- Fork to add attachment subprocess -->
	<fork name="attachmentFork">
		<transition name="toDecision" to="decision"/>
		<transition to="addAttachment" name="to addAttachment"/>
	</fork>
	
	<fork name="firstFork">
		<transition name="toEmailsFetcher" to="emailsFetcher"/>
		<transition to="handlerAssignsOwner" name="toHandlerAssignsOwner"/>
	</fork>

	<!-- Decision of owner assignment -->
	<decision 	
		name="ifHandlerAssigned"
		expression="#{handlerAssignedOwner != null &amp;&amp; handlerAssignedOwner}">
		<transition 	
			to="anonymousOwnerAssignment" 
			name="false"/>
		<transition 
			to="sendHandlerNewCaseArrivedMessage" 
			name="true"/>
	</decision>

	<node name="subscribeHandlers">
		<event type="node-enter">
			<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
				<handlerName>administratorAssignmentHandler</handlerName>
			</action>
		</event>
		<transition to="firstFork"></transition>
	</node>

	<decision 
		name="isGranted"
		expression="#{string_decision == 'true'}">
		<transition to="grant" name="true"/>
		<transition to="deny" name="false"/>
	</decision>

	<!-- Event for sending mail, when handler is assigned to case -->
	<event type="handlerAssignedToCase">
		<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
			<handlerName>caseHandlerAssignmentHandler</handlerName>
			<propertyMap 
				key-type='java.lang.String' 
				value-type='java.lang.String'>
				<entry>
					<key>caseHandlerRoleExp</key>
					<value>{role: {roleName: 'bpm_social_service_caseHandler'}}
					</value>
				</entry>
				<entry>
					<key>inlineSubject</key>
					<value>
						${
						Map subjectMap = new HashMap();
						subjectMap.put("en", "Handler was assigned to the case");
						subjectMap.put("is_IS", "Umsókn ({0}, {1}) í flokknum {2} hjá Lýðheilsusjóði hefur fengið umsjónarmann");
						return subjectMap;
						}
					</value>
				</entry>
				<entry>
					<key>inlineMessage</key>
					<value>
						${
						Map messageMap = new HashMap();
						messageMap.put("en", "Hi.\nHandler of the board of Lydheilsusjoður was assigned to the case {2} with identifier {3} and description {4}");
						messageMap.put("is_IS", "Sæl/ll.\nStjórn Lýðheilsusjóðs hefur tekið að sér umsóknina með nafnið : {4} ({3}) í flokknum : {2}.");
						return messageMap;
						}
					</value>
				</entry>
				<entry>
					<key>subjectValues</key>
					<value>
						{list: {mv: [
							{type: "bean", value: "piw.processDescription"}, 
							{type: "bean", value: "piw.processIdentifier"},
							{type: "bean", value: "piw.processDefinitionW.startTaskName"}
						]}}
					</value>
				</entry>
				<entry>
					<key>messageValues</key>
					<value>
						{list: {mv: [
							{type: "bean", value: "user.name"}, 
							{type: "roleUsers", value: "{role: {roleName: 'bpm_social_service_caseHandler'}}"}, 
							{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
							{type: "bean", value: "piw.processIdentifier"}, 
							{type: "bean", value: "piw.processDescription"}
						]}}
					</value>
				</entry>
				<entry>
					<key>sendToRoles</key>
					<value>bpm_social_service_handler</value>
				</entry>
			</propertyMap>
		</action>
	</event>
	
	<!-- Event for sending mail, when handler is unassigned from case -->
	<event type="handlerUnassignedFromCase">
		<action class="com.idega.jbpm.proxy.JbpmHandlerProxy">
			<handlerName>caseHandlerAssignmentHandler</handlerName>
			<propertyMap 
				key-type='java.lang.String' 
				value-type='java.lang.String'>
				<entry>
					<key>caseHandlerRoleExp</key>
					<value>{role: {roleName: 'bpm_social_service_caseHandler'}}
					</value>
				</entry>
				<entry>
					<key>inlineSubject</key>
					<value>
						${
						Map subjectMap = new HashMap();
						subjectMap.put("en", "Handler was unassigned from the case");
						subjectMap.put("is_IS", "Umsjónarmannaskipti á umsókn ({0}, {1})");
						return subjectMap;
						}
					</value>
				</entry>
				<entry>
					<key>inlineMessage</key>
					<value>
						${
						Map messageMap = new HashMap();
						messageMap.put("en", "Hi, {0}.\n Handler was unassigned from the case {1} with identifier {2} and description {3}");
						messageMap.put("is_IS", "Sæl/ll, {0}.\nUmsjónarmannaskipti hafa átt sér stað fyrir umsókn með nafnið: {3} ({2}) í flokknum {1}.");
						return messageMap;
						}
					</value>
				</entry>
				<entry>
					<key>subjectValues</key>
					<value>
						{list: {mv: [
							{type: "bean", value: "piw.processDescription"}, 
							{type: "bean", value: "piw.processIdentifier"}
						]}}
					</value>
				</entry>
				<entry>
					<key>messageValues</key>
					<value>
						{list: {mv: [
							{type: "bean", value: "user.name"}, 
							{type: "bean", value: "piw.processDefinitionW.startTaskName"}, 
							{type: "bean", value: "piw.processIdentifier"}, 
							{type: "bean", value: "piw.processDescription"}
						]}}
					</value>
				</entry>
				<entry>
					<key>sendToRoles</key>
					<value>bpm_social_service_handler</value>
				</entry>
			</propertyMap>
		</action>
	</event>
	
	<!-- Finishing main case -->	
	<end-state
		name="completeProcess"
		end-complete-process="true" />
	
	<!-- End state of e-mails fetcher subprocess -->
	<end-state name="emailsFetcherEnd"/>
	
	<!-- End of add attachment subprocess -->
	<end-state name="attachementAdded"/>
</process-definition>